/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.ChiTietHoaDonBUS;
import BUS.CouponBUS;
import BUS.HoaDonBUS;
import BUS.KhachHangBUS;
import BUS.KhuyenMaiHoaDonBUS;
import BUS.KhuyenMaiSanPhamBUS;
import BUS.SanPhamBUS;
import DTO.ChiTietHoaDon;
import DTO.ChucVu;
import DTO.Coupon;
import DTO.HoaDon;
import DTO.KhachHang;
import DTO.KhuyenMaiHoaDon;
import DTO.KhuyenMaiSanPham;
import DTO.NhanVien;
import DTO.SanPham;
import java.sql.SQLException;
import java.sql.Timestamp;
import static java.sql.Types.NULL;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author ASUS
 */
public class BanHangJPanel extends javax.swing.JPanel {
    private SanPhamBUS spBUS;
    private DefaultTableModel dtm;
    private DefaultTableModel dtm1;
    private KhachHangBUS khBUS;
    private NhanVien user;
    private KhuyenMaiSanPhamBUS kmspBUS;
    private KhuyenMaiHoaDonBUS kmhdBUS;
    private CouponBUS cpBUS;
    private HoaDonBUS hdBUS;
    private ChiTietHoaDonBUS cthdBUS;
    private ArrayList<KhuyenMaiHoaDon> arr_KMHD;
    private ArrayList<KhuyenMaiSanPham> arr_KMSP;
    private ArrayList<ChiTietHoaDon> arr_CTHD;
    private ArrayList<Coupon> arr_CP;
    private ChucVu cv;
    /**
     * Creates new form BanHangJPanel
     */
    public BanHangJPanel() throws SQLException, ClassNotFoundException, ParseException {
        spBUS = new SanPhamBUS();
        dtm = new DefaultTableModel();
        dtm1 = new DefaultTableModel();
        khBUS = new KhachHangBUS();
        kmspBUS = new KhuyenMaiSanPhamBUS();
        kmhdBUS = new KhuyenMaiHoaDonBUS();
        cpBUS = new CouponBUS();
        hdBUS= new HoaDonBUS();
        arr_KMHD = new ArrayList<KhuyenMaiHoaDon>();
        arr_KMSP = new ArrayList<KhuyenMaiSanPham>();
        arr_CTHD = new ArrayList<ChiTietHoaDon>();
        cthdBUS = new ChiTietHoaDonBUS();
        arr_CP = new ArrayList<Coupon>();
        initComponents();
        SetUp();
    }
    
    public BanHangJPanel (NhanVien user, ChucVu permission) throws ClassNotFoundException, SQLException, ParseException {
        spBUS = new SanPhamBUS();
        dtm = new DefaultTableModel();
        dtm1 = new DefaultTableModel();
        khBUS = new KhachHangBUS();
        this.user=user;
        kmspBUS = new KhuyenMaiSanPhamBUS();
        kmhdBUS = new KhuyenMaiHoaDonBUS();
        cpBUS = new CouponBUS();
        hdBUS= new HoaDonBUS();
        cthdBUS = new ChiTietHoaDonBUS();
        arr_KMHD = new ArrayList<KhuyenMaiHoaDon>();
        arr_KMSP = new ArrayList<KhuyenMaiSanPham>();
        arr_CTHD = new ArrayList<ChiTietHoaDon>();
        arr_CP = new ArrayList<Coupon>();
        cv=permission;
        initComponents();
        SetUp();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void SetUp() throws SQLException, ClassNotFoundException, ParseException
    {   
        if(cv.getHoaDon().contains("them"))
        {
            jButton7.setEnabled(true);
        }
        LoadComboBox();
        LoadRowValueToTextFDHd(jTable2);
        LoadRowValueToTextFDSpChooser(jTable1);
        changeTableModelSp(spBUS.getAll());
        dtm1 = new DefaultTableModel(){
            public Class getColumnClass(int column) {
                    if(column==2)
                    {
                        return Double.class;
                    }
                    return String.class;
                }
            @Override
            public boolean isCellEditable(int row, int column) {
               return false;
            }
        };
        dtm1.addColumn("Mã sản phẩm");
        dtm1.addColumn("Tên sản phẩm");
        dtm1.addColumn("Giá sản phẩm");
        dtm1.addColumn("Số lượng");
        jTable2.setModel(dtm1);
    }
    
    public void SetCodeComboBox() throws SQLException, ClassNotFoundException
    {
        DecimalFormat format = new DecimalFormat("#######",new DecimalFormatSymbols(Locale.GERMAN));
        double tongdiem=TongTienChuaGiamHD();
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        ArrayList<KhuyenMaiHoaDon> arr = new ArrayList<KhuyenMaiHoaDon>();
        ArrayList<Coupon> arr1 = new ArrayList<Coupon>();
        List<String> code=new ArrayList<String>();
        try {
            arr = kmhdBUS.searchKmhd("Đơn hàng tối thiểu", format.format(tongdiem), 1);
            arr1 = cpBUS.getAllCouponNotDeleted();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(arr.size()>0 && arr1.size()>0)
        {
            for(int i=0;i<arr.size();i++)
            {
                for(int j=0;j<arr1.size();j++)
                {
                    if(arr.get(i).getMaKMHD()==arr1.get(j).getMaKMHD() && arr1.get(j).getTongLuotApDung()>arr1.get(j).getTongLuotDaDung() && arr.get(i).getTongLuotApDung()>arr.get(i).getTongLuotDaDung() && timestamp.compareTo(arr.get(i).getNgayKetThuc())<0 && timestamp.compareTo(arr.get(i).getNgayBatDau())>0)
                    {
                        code.add(arr1.get(j).getCode());
                    }
                }
            }
        }
        String[] codestr=code.toArray(new String[0]);
        jComboBox1.setModel(new DefaultComboBoxModel(codestr));
    }
    
    public void changeTableModelSp(List<SanPham> arr)
    {
        dtm = new DefaultTableModel(){
            public Class getColumnClass(int column) {
                    if(column==2)
                    {
                        return Double.class;
                    }
                    return String.class;
                }
            @Override
            public boolean isCellEditable(int row, int column) {
               return false;
            }
        };
        dtm.addColumn("Mã sản phẩm");
        dtm.addColumn("Tên sản phẩm");
        dtm.addColumn("Giá sản phẩm");
        dtm.addColumn("Số lượng");
        jTable1.setModel(dtm);
        for(int i=0;i<arr.size();i++)
        {
            //System.out.print(arr.get(i));
            Object[] row = {arr.get(i).getMaSP(),arr.get(i).getTenSP(),Double.parseDouble(arr.get(i).getGiaSP()),arr.get(i).getSL()};
            dtm.addRow(row);
        }
    }
    
    public boolean checktrung()
    {
        for(int i=0;i<dtm1.getRowCount();i++)
        {
            if(dtm1.getValueAt(i, 0).toString().equals(dtm.getValueAt(jTable1.getSelectedRow(), 0).toString()))
            {
                return false;
            }
        }
        return true;
    }
    
    public void LoadRowValueToTextFDSpChooser(JTable table)
    {
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            @Override
        public void valueChanged(ListSelectionEvent event) {
            // do some actions here, for example
            int viewRow = table.getSelectedRow();
            if (!event.getValueIsAdjusting() && viewRow != -1) {
                int viewrow=table.convertRowIndexToModel(viewRow);
                if(Integer.parseInt(table.getModel().getValueAt(viewrow, 3).toString())>0)
                {
                    SpinnerNumberModel model = new SpinnerNumberModel(1, 1, Integer.parseInt(table.getModel().getValueAt(viewrow, 3).toString()), 1);  
                    jSpinner1.setModel(model);
                }
                else
                {
                    SpinnerNumberModel model = new SpinnerNumberModel(0, 0, Integer.parseInt(table.getModel().getValueAt(viewrow, 3).toString()), 1);  
                    jSpinner1.setModel(model);
                }
            }
        }
    });
    }
    
    public void LoadComboBox() throws SQLException
    {
        List<KhachHang> khlist=khBUS.getAll();
        String[] temp=new String[khBUS.getAll().size()];
        for(int i=0;i<khBUS.getAll().size();i++)
        {
            temp[i]=String.valueOf(khlist.get(i).getMaKH());
        }
        jComboBox3.setModel(new DefaultComboBoxModel(temp));
    }
    
    public void RefreshSpinner()
    {
        int max=0;
        if(dtm1.getRowCount()>0)
        {
            for(int i=0;i<dtm.getRowCount();i++)
            {
                if(dtm1.getValueAt(jTable2.getSelectedRow(), 0).toString().equals(dtm.getValueAt(i, 0).toString()))
                {
                    max=Integer.parseInt(dtm1.getValueAt(jTable2.getSelectedRow(), 3).toString())+Integer.parseInt(dtm.getValueAt(i, 3).toString());
                }
            }
        }
        if(max>0)
        {
            SpinnerNumberModel model = new SpinnerNumberModel(1, 1, max, 1);  
            jSpinner2.setModel(model);
        }
        else
        {
            SpinnerNumberModel model = new SpinnerNumberModel(0, 0, max, 1);  
            jSpinner2.setModel(model);
        }
    }
    
    
    
    public double TongTienChuaGiamHD() throws SQLException, ClassNotFoundException
    {
        if(arr_KMSP.size()>0)
        {
            arr_KMSP.clear();
        }
        if(arr_CTHD.size()>0)
        {
            arr_CTHD.clear();
        }
        double tong=0;
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        if(dtm1.getRowCount()>0)
        {
            for(int i=0;i<dtm1.getRowCount();i++)
            {
                int sldsd=0, slsdd=0, slcl=0;
                float ptg=0;
                double stg=0,stdgsp=0,stkg=0;
                ArrayList<KhuyenMaiSanPham> arr=kmspBUS.searchKmsp("Mã SP", dtm1.getValueAt(i, 0).toString(), 1);
                if(arr.size()>0)
                {
                    if(timestamp.compareTo(arr.get(0).getNgayKetThuc())<0 && timestamp.compareTo(arr.get(0).getNgayBatDau())>0)
                    {
                        slsdd=arr.get(0).getTongLuotApDung()-arr.get(0).getTongLuotDaDung();
                    }
                }
                for(int h=0;h<Integer.parseInt(dtm1.getValueAt(i, 3).toString());h++)
                {
                    if(slsdd>0)
                    {
                        ptg=arr.get(0).getPhanTramGiam();
                        stg=arr.get(0).getSoTienGiam();
                        if(ptg>0)
                        {
                            tong=(Double.parseDouble(dtm1.getValueAt(i, 2).toString())*(100.0f-ptg))/100.0f  +tong;
                            stdgsp=(Double.parseDouble(dtm1.getValueAt(i, 2).toString())*(100.0f-ptg))/100.0f+stdgsp;
                        }
                        if(stg>0)
                        {
                            tong=(Double.parseDouble(dtm1.getValueAt(i, 2).toString())-stg)+tong;
                            stdgsp=(Double.parseDouble(dtm1.getValueAt(i, 2).toString())-stg)+stdgsp;
                        }
                        slsdd--;
                        sldsd++;
                    }
                    else
                    {
                        tong=Double.parseDouble(dtm1.getValueAt(i, 2).toString())+tong;
                        stkg=Double.parseDouble(dtm1.getValueAt(i, 2).toString())+stkg;
                        slcl++;
                    }
                }
                double ttcg=Double.parseDouble(dtm1.getValueAt(i, 2).toString())*Integer.parseInt(dtm1.getValueAt(i, 3).toString());
                if(sldsd>0)
                {
                    ChiTietHoaDon cthd=new ChiTietHoaDon(Integer.parseInt(dtm1.getValueAt(i, 0).toString()),NULL,sldsd,ttcg,stdgsp);
                    arr_CTHD.add(cthd);
                }
                if(slcl>0)
                {
                    ChiTietHoaDon cthd=new ChiTietHoaDon(Integer.parseInt(dtm1.getValueAt(i, 0).toString()),NULL,slcl,stkg,0);
                    arr_CTHD.add(cthd);
                }
                if(arr.size()>0)
                {
                    if(timestamp.compareTo(arr.get(0).getNgayKetThuc())<0 && timestamp.compareTo(arr.get(0).getNgayBatDau())>0)
                    {
                        arr.get(0).setTongLuotDaDung(sldsd+arr.get(0).getTongLuotDaDung());
                        arr_KMSP.add(arr.get(0));
                    }
                }
            }
            System.out.println("arr_CTHD:"+arr_CTHD.size());
        }
        
        return tong;
    }
    
    public void TongTien() throws SQLException, ClassNotFoundException
    {
        if(arr_KMHD.size()>0)
        {
            arr_KMHD.clear();
        }
        if(arr_CP.size()>0)
        {
            arr_CP.clear();
        }
        double tiendu=0;
        double tong=0;
        double tiensp=0;
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        if(dtm1.getRowCount()>0)
        {
            for(int i=0;i<dtm1.getRowCount();i++)
            {
                tiensp=Integer.parseInt(dtm1.getValueAt(i, 3).toString())*Double.parseDouble(dtm1.getValueAt(i, 2).toString())+tiensp;
            }
        }
        tong=TongTienChuaGiamHD();
        DecimalFormat format = new DecimalFormat("#######",new DecimalFormatSymbols(Locale.GERMAN));
        jTextField8.setText(format.format(tong));
        if(jComboBox1.getModel().getSize()>0)
        {
            ArrayList<Coupon> arrCP=cpBUS.searchCp("Code", jComboBox1.getSelectedItem().toString());
            ArrayList<KhuyenMaiHoaDon> arrKMHD=kmhdBUS.searchKmhd("Mã KMHD", String.valueOf(arrCP.get(0).getMaKMHD()), 1);
            if(arrKMHD.size()>0 && arrCP.get(0).getTongLuotApDung()>arrCP.get(0).getTongLuotDaDung() && arrKMHD.get(0).getTongLuotApDung()>arrKMHD.get(0).getTongLuotDaDung() && timestamp.compareTo(arrKMHD.get(0).getNgayKetThuc())<0 && timestamp.compareTo(arrKMHD.get(0).getNgayBatDau())>0)
            {
                if(arrKMHD.get(0).getPhanTramGiam()>0)
                {
                    tong=tong*(100.0f-arrKMHD.get(0).getPhanTramGiam())/100.0f;
                }
                if(arrKMHD.get(0).getSoTienGiam()>0)
                {
                    tong=tong-arrKMHD.get(0).getSoTienGiam();
                }
                arrKMHD.get(0).setTongLuotDaDung(arrKMHD.get(0).getTongLuotDaDung()+1);
                arr_KMHD.add(arrKMHD.get(0));
                arrCP.get(0).setTongLuotDaDung(arrCP.get(0).getTongLuotDaDung()+1);
                arr_CP.add(arrCP.get(0));
            }
        }
        jTextField7.setText(format.format(tiensp-tong));
        jTextField8.setText(format.format(tong));
    }
    
    public void LoadRowValueToTextFDHd(JTable table)
    {
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            @Override
        public void valueChanged(ListSelectionEvent event) {
            int viewRow = table.getSelectedRow();
            int max=0;
            if (!event.getValueIsAdjusting() && viewRow != -1) {
                //System.out.println(table.getValueAt(table.getSelectedRow(), 0).toString());
                System.out.println(dtm.getRowCount()+"======"+dtm1.getRowCount());
                if(dtm.getRowCount()>0)
                {
                    for(int i=0;i<dtm.getRowCount();i++)
                    {
                        if(dtm1.getValueAt(viewRow, 0).toString().equals(dtm.getValueAt(i, 0).toString()))
                        {
                            max=Integer.parseInt(dtm1.getValueAt(jTable2.getSelectedRow(), 3).toString())+Integer.parseInt(dtm.getValueAt(i, 3).toString());
                        }
                    }
                }
                int viewrow=table.convertRowIndexToModel(viewRow);
                if(max>0)
                {
                    SpinnerNumberModel model = new SpinnerNumberModel(1, 1, max, 1);  
                    jSpinner2.setModel(model);
                }
                else
                {
                    SpinnerNumberModel model = new SpinnerNumberModel(0, 0, max, 1);  
                    jSpinner2.setModel(model);
                }
            }
        }
    });
    }
    
    public void changeTableModelHd(List<SanPham> arr)
    {
        DefaultTableModel dtm = new DefaultTableModel(){
            public Class getColumnClass(int column) {
                    if(column==2)
                    {
                        return Double.class;
                    }
                    return String.class;
                }
        };
        dtm.addColumn("Mã sản phẩm");
        dtm.addColumn("Tên sản phẩm");
        dtm.addColumn("Giá sản phẩm");
        dtm.addColumn("Số lượng");
        jTable2.setModel(dtm);
        for(int i=0;i<arr.size();i++)
        {
            Object[] row = {arr.get(i).getMaSP(),arr.get(i).getTenSP(),arr.get(i).getGiaSP(),arr.get(i).getSL()};
            dtm.addRow(row);
        }
    }
    
    public void TinhLaiTienDu()
    {
        if(jTextField8.getText()=="0"||jTextField8.getText().isBlank())
        {
            jTextField6.setText("");
        }
        else
        {
            double tiendu=Double.parseDouble(jSpinner3.getValue().toString())-Double.parseDouble(jTextField8.getText());
            DecimalFormat format = new DecimalFormat("#######",new DecimalFormatSymbols(Locale.GERMAN));
            jTextField6.setText(format.format(Double.valueOf(tiendu)).toString());
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        draggableRoundPanel1 = new CUSTOM.DraggableRoundPanel();
        draggableRoundPanel2 = new CUSTOM.DraggableRoundPanel();
        draggableRoundPanel4 = new CUSTOM.DraggableRoundPanel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        draggableRoundPanel5 = new CUSTOM.DraggableRoundPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        draggableRoundPanel9 = new CUSTOM.DraggableRoundPanel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        draggableRoundPanel3 = new CUSTOM.DraggableRoundPanel();
        draggableRoundPanel6 = new CUSTOM.DraggableRoundPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        draggableRoundPanel7 = new CUSTOM.DraggableRoundPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        draggableRoundPanel8 = new CUSTOM.DraggableRoundPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1133, 668));
        setPreferredSize(new java.awt.Dimension(1133, 668));

        draggableRoundPanel1.setMinimumSize(new java.awt.Dimension(900, 400));
        draggableRoundPanel1.setLayout(new java.awt.GridBagLayout());

        draggableRoundPanel2.setMinimumSize(new java.awt.Dimension(350, 400));
        draggableRoundPanel2.setPreferredSize(new java.awt.Dimension(550, 500));
        draggableRoundPanel2.setLayout(new java.awt.BorderLayout());

        draggableRoundPanel4.setBackground(new java.awt.Color(31, 31, 31));
        draggableRoundPanel4.setLayout(new java.awt.GridBagLayout());

        jTextField2.setMinimumSize(new java.awt.Dimension(160, 22));
        jTextField2.setPreferredSize(new java.awt.Dimension(350, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        draggableRoundPanel4.add(jTextField2, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(255, 101, 0));
        jButton2.setText("Tìm kiếm");
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        draggableRoundPanel4.add(jButton2, new java.awt.GridBagConstraints());

        draggableRoundPanel2.add(draggableRoundPanel4, java.awt.BorderLayout.PAGE_START);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout draggableRoundPanel5Layout = new javax.swing.GroupLayout(draggableRoundPanel5);
        draggableRoundPanel5.setLayout(draggableRoundPanel5Layout);
        draggableRoundPanel5Layout.setHorizontalGroup(
            draggableRoundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );
        draggableRoundPanel5Layout.setVerticalGroup(
            draggableRoundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );

        draggableRoundPanel2.add(draggableRoundPanel5, java.awt.BorderLayout.CENTER);

        draggableRoundPanel9.setBackground(new java.awt.Color(31, 31, 31));
        draggableRoundPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Số lượng:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        draggableRoundPanel9.add(jLabel3, gridBagConstraints);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jSpinner1.setPreferredSize(new java.awt.Dimension(50, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        draggableRoundPanel9.add(jSpinner1, gridBagConstraints);

        jButton4.setBackground(new java.awt.Color(255, 101, 0));
        jButton4.setText("Thêm");
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        draggableRoundPanel9.add(jButton4, gridBagConstraints);

        jButton5.setBackground(new java.awt.Color(255, 101, 0));
        jButton5.setText("Refresh");
        jButton5.setBorderPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 15, 0);
        draggableRoundPanel9.add(jButton5, gridBagConstraints);

        draggableRoundPanel2.add(draggableRoundPanel9, java.awt.BorderLayout.PAGE_END);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 25);
        draggableRoundPanel1.add(draggableRoundPanel2, gridBagConstraints);

        draggableRoundPanel3.setMinimumSize(new java.awt.Dimension(400, 400));
        draggableRoundPanel3.setPreferredSize(new java.awt.Dimension(525, 600));
        draggableRoundPanel3.setLayout(new java.awt.BorderLayout());

        draggableRoundPanel6.setBackground(new java.awt.Color(31, 31, 31));
        draggableRoundPanel6.setLayout(new java.awt.GridBagLayout());

        jTextField1.setMinimumSize(new java.awt.Dimension(160, 22));
        jTextField1.setPreferredSize(new java.awt.Dimension(350, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        draggableRoundPanel6.add(jTextField1, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(255, 101, 0));
        jButton1.setText("Tìm kiếm");
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        draggableRoundPanel6.add(jButton1, new java.awt.GridBagConstraints());

        draggableRoundPanel3.add(draggableRoundPanel6, java.awt.BorderLayout.PAGE_START);

        draggableRoundPanel7.setBackground(new java.awt.Color(31, 31, 31));
        draggableRoundPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(31, 31, 31));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Tiền khách đưa:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Tiền dư:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(60, 22));
        jTextField6.setPreferredSize(new java.awt.Dimension(90, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jTextField6, gridBagConstraints);

        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText("Tổng tiền:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jLabel7, gridBagConstraints);

        jTextField8.setEditable(false);
        jTextField8.setMinimumSize(new java.awt.Dimension(60, 22));
        jTextField8.setPreferredSize(new java.awt.Dimension(90, 22));
        jTextField8.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField8PropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        jPanel1.add(jTextField8, gridBagConstraints);

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 10000.0d));
        jSpinner3.setMinimumSize(new java.awt.Dimension(60, 22));
        jSpinner3.setPreferredSize(new java.awt.Dimension(90, 22));
        jPanel1.add(jSpinner3, new java.awt.GridBagConstraints());

        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("Số tiền giảm:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(jLabel10, gridBagConstraints);

        jTextField7.setEditable(false);
        jTextField7.setMinimumSize(new java.awt.Dimension(60, 22));
        jTextField7.setPreferredSize(new java.awt.Dimension(90, 22));
        jTextField7.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField7PropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(jTextField7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        draggableRoundPanel7.add(jPanel1, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(31, 31, 31));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel6.setForeground(new java.awt.Color(240, 240, 240));
        jLabel6.setText("Số lượng:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jLabel6, gridBagConstraints);

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jSpinner2.setMinimumSize(new java.awt.Dimension(60, 22));
        jSpinner2.setPreferredSize(new java.awt.Dimension(90, 22));
        jPanel2.add(jSpinner2, new java.awt.GridBagConstraints());

        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("Mã KH:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel2.add(jLabel8, gridBagConstraints);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.setMinimumSize(new java.awt.Dimension(60, 22));
        jComboBox3.setPreferredSize(new java.awt.Dimension(90, 22));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel2.add(jComboBox3, gridBagConstraints);

        jLabel9.setForeground(new java.awt.Color(240, 240, 240));
        jLabel9.setText("Code:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jLabel9, gridBagConstraints);

        jComboBox1.setMinimumSize(new java.awt.Dimension(60, 22));
        jComboBox1.setPreferredSize(new java.awt.Dimension(90, 22));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        jPanel2.add(jComboBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        draggableRoundPanel7.add(jPanel2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(31, 31, 31));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jButton6.setBackground(new java.awt.Color(255, 101, 0));
        jButton6.setText("Tính tiền dư");
        jButton6.setBorderPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel3.add(jButton6, gridBagConstraints);

        jButton7.setBackground(new java.awt.Color(255, 101, 0));
        jButton7.setText("Lập hóa đơn");
        jButton7.setEnabled(false);
        jButton7.setBorderPainted(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        jPanel3.add(jButton7, gridBagConstraints);

        jButton8.setBackground(new java.awt.Color(255, 101, 0));
        jButton8.setText("Xóa SP");
        jButton8.setBorderPainted(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel3.add(jButton8, gridBagConstraints);

        jButton3.setBackground(new java.awt.Color(255, 101, 0));
        jButton3.setText("Sửa SL");
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel3.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        draggableRoundPanel7.add(jPanel3, gridBagConstraints);

        draggableRoundPanel3.add(draggableRoundPanel7, java.awt.BorderLayout.PAGE_END);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout draggableRoundPanel8Layout = new javax.swing.GroupLayout(draggableRoundPanel8);
        draggableRoundPanel8.setLayout(draggableRoundPanel8Layout);
        draggableRoundPanel8Layout.setHorizontalGroup(
            draggableRoundPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );
        draggableRoundPanel8Layout.setVerticalGroup(
            draggableRoundPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
        );

        draggableRoundPanel3.add(draggableRoundPanel8, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        draggableRoundPanel1.add(draggableRoundPanel3, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Danh sách sản phẩm");
        draggableRoundPanel1.add(jLabel1, new java.awt.GridBagConstraints());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Lập hóa đơn");
        draggableRoundPanel1.add(jLabel2, new java.awt.GridBagConstraints());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(draggableRoundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(draggableRoundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if(jTable1.getSelectedRows().length==0)
        {
            JOptionPane.showMessageDialog(this, "Chưa chọn hàng để thêm!");
        }
        else if(checktrung()==false)
        {
            JOptionPane.showMessageDialog(this, "Không được chọn trùng hàng để thêm!");
        }
        else if(Integer.parseInt(dtm.getValueAt(jTable1.getSelectedRow(), 3).toString())<=0)
        {
            JOptionPane.showMessageDialog(this, "Hết hàng!");
        }
        else
        {
            dtm.setValueAt(Integer.toUnsignedString(Integer.parseInt(dtm.getValueAt(jTable1.getSelectedRow(), 3).toString())-Integer.parseInt(jSpinner1.getValue().toString())), jTable1.getSelectedRow(), 3);
            Object[] row = {dtm.getValueAt(jTable1.getSelectedRow(), 0).toString(),dtm.getValueAt(jTable1.getSelectedRow(), 1).toString(),Double.parseDouble(dtm.getValueAt(jTable1.getSelectedRow(), 2).toString()),jSpinner1.getValue().toString()};
            dtm1.addRow(row);
            try {
                SetCodeComboBox();
                TongTien();
            } catch (SQLException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(dtm1.getRowCount()>0)
        {
            JOptionPane.showMessageDialog(this, "Vẫn còn sản phẩm trong phần lập hóa đơn!");
        }
        try {
            // TODO add your handling code here:
            changeTableModelSp(spBUS.getAll());
        } catch (SQLException ex) {
            Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        if(jTable2.getSelectedRows().length==0)
        {
            JOptionPane.showMessageDialog(this, "Chưa chọn hàng để xóa!");
        }
        else
        {
            int rowindex=0;
            for(int i=0;i<dtm.getRowCount();i++)
            {
                if(dtm1.getValueAt(jTable2.getSelectedRow(), 0).toString().equals(dtm.getValueAt(i, 0).toString()))
                {
                    rowindex=i;
                }
            }
            dtm.setValueAt(Integer.toUnsignedString(Integer.parseInt(dtm.getValueAt(rowindex, 3).toString())+Integer.parseInt(dtm1.getValueAt(jTable2.getSelectedRow(), 3).toString())), rowindex, 3);
            dtm1.removeRow(jTable2.getSelectedRow());
            RefreshSpinner();
            try {
                SetCodeComboBox();
                TongTien();
            } catch (SQLException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            TinhLaiTienDu();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(jTable2.getSelectedRows().length==0)
        {
            JOptionPane.showMessageDialog(this, "Chưa chọn hàng để sửa!");
        }
        else
        {
            int rowindex=0;
            for(int i=0;i<dtm.getRowCount();i++)
            {
                if(dtm1.getValueAt(jTable2.getSelectedRow(), 0).toString().equals(dtm.getValueAt(i, 0).toString()))
                {
                    rowindex=i;
                }
            }
            dtm.setValueAt(Integer.toUnsignedString(Integer.parseInt(dtm1.getValueAt(jTable2.getSelectedRow(), 3).toString())+Integer.parseInt(dtm.getValueAt(rowindex, 3).toString())-Integer.parseInt(jSpinner2.getValue().toString())), rowindex, 3);
            dtm1.setValueAt(Integer.toUnsignedString(Integer.parseInt(jSpinner2.getValue().toString())), jTable2.getSelectedRow(), 3);
            RefreshSpinner();
            try {
                SetCodeComboBox();
                TongTien();
            } catch (SQLException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            TinhLaiTienDu();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        double tiendu=Double.parseDouble(jSpinner3.getValue().toString())-Double.parseDouble(jTextField8.getText());
        DecimalFormat format = new DecimalFormat("#######",new DecimalFormatSymbols(Locale.GERMAN));
        jTextField6.setText(format.format(Double.valueOf(tiendu)).toString());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(dtm);
        jTable1.setRowSorter(sorter);
        String text = jTextField2.getText();
        if (text.length() == 0) {
          sorter.setRowFilter(null);
        } else {
          sorter.setRowFilter(RowFilter.regexFilter(text));
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(dtm1);
        jTable2.setRowSorter(sorter);
        String text = jTextField1.getText();
        if (text.length() == 0) {
          sorter.setRowFilter(null);
        } else {
          sorter.setRowFilter(RowFilter.regexFilter(text));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if(dtm1.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(this, "Chưa có sản phẩm nào!");
        }
        else if(jTextField6.getText().isBlank())
        {
            JOptionPane.showMessageDialog(this, "Chưa tính tiền!");
        }
        else if(Double.parseDouble(jTextField6.getText())<0)
        {
            JOptionPane.showMessageDialog(this, "Khách hàng chưa đưa đủ tiền!");
        }
        else if(jTextField8.getText().isBlank()||jTextField8.getText()=="0")
        {
            JOptionPane.showMessageDialog(this, "Chưa có sản phẩm");
        }
        else if(user==null||user.getMaNV()<=0)
        {
            JOptionPane.showMessageDialog(this, "Chưa có mã nhân viên");
        }
        else
        {
            int mahd=0;
            List<SanPham> arrsp=new ArrayList<SanPham>();
            try {
                arrsp = spBUS.getAll();
            } catch (SQLException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");  
            Date date = new Date();
            HoaDon hd=new HoaDon();
            hd.setIsDeleted(0);
            hd.setMaKH(Integer.parseInt(jComboBox3.getSelectedItem().toString()));
            hd.setMaNV(user.getMaNV());
            try {
                hd.setNgayTao(formatter.parse(formatter.format(date)));
            } catch (ParseException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            hd.setTongTien(Double.parseDouble(jTextField8.getText()));
            if(arr_KMHD.size()>0)
            {
                hd.setMaKMHD(arr_KMHD.get(0).getMaKMHD());
            }
            else
            {
                hd.setMaKMHD(NULL);
            }
            try {
                cpBUS.addHD(hd);
                mahd=cpBUS.searchNewestHD().getMaHD();
            } catch (SQLException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            for(int i=0;i<dtm1.getRowCount();i++)
            {
                if(arrsp.size()>0)
                {
                    for(int h=0;h<arrsp.size();h++)
                    {
                        if(arrsp.get(h).getMaSP()==Integer.parseInt(dtm1.getValueAt(i, 0).toString()))
                        {
                            SanPham sp=arrsp.get(h);
                            sp.setSL(sp.getSL()-Integer.parseInt(dtm1.getValueAt(i, 3).toString()));
                            try {
                                spBUS.capNhatSanPham(sp);
                            } catch (SQLException ex) {
                                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            if(arr_KMHD.size()>0)
            {
                for(int i=0;i<arr_KMHD.size();i++)
                {
                    try {
                        kmhdBUS.updateKmhd(arr_KMHD.get(i));
                    } catch (SQLException ex) {
                        Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if(arr_CP.size()>0)
            {
                for(int i=0;i<arr_CP.size();i++)
                {
                    try {
                        cpBUS.updateCoupon(arr_CP.get(i));
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if(arr_KMSP.size()>0)
            {
                for(int i=0;i<arr_KMSP.size();i++)
                {
                    try {
                        kmspBUS.updateKhuyenMaiSanPham(arr_KMSP.get(i));
                    } catch (SQLException ex) {
                        Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            for(int i=0;i<arr_CTHD.size();i++)
            {
                try {
                    arr_CTHD.get(i).setMaHD(mahd);
                    cthdBUS.addCTHD(arr_CTHD.get(i));
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            dtm1.setRowCount(0);
            jTable2.revalidate();
            DefaultComboBoxModel cbb=new DefaultComboBoxModel();
            jComboBox1.setModel(cbb);
            jComboBox3.setModel(cbb);
            jTextField8.setText("");
            jTextField7.setText("");
            jTextField6.setText("");
            jSpinner3.setValue(0);
            try {
                changeTableModelSp(spBUS.getAll());
            } catch (SQLException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField7PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField7PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7PropertyChange

    private void jTextField8PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField8PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8PropertyChange

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        try {
            // TODO add your handling code here:
            TongTien();
        } catch (SQLException ex) {
            Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BanHangJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private CUSTOM.DraggableRoundPanel draggableRoundPanel1;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel2;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel3;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel4;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel5;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel6;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel7;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel8;
    private CUSTOM.DraggableRoundPanel draggableRoundPanel9;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
