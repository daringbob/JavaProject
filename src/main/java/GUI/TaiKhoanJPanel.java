/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import BUS.NhanVienBUS;
import CUSTOM.KiemTra;
import CUSTOM.PasswordHash;
import DTO.ChucVu;
import DTO.NhanVien;

/**
 *
 * @author HP
 */
public class TaiKhoanJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel1
     */
    public TaiKhoanJPanel() {
        initComponents();
    }
    
    public TaiKhoanJPanel (NhanVien user, ChucVu permission) {
        this.user = user;
        this.permission = permission;
        initComponents();
        loadUserInfo(user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roundPanel = new CUSTOM.DraggableRoundPanel();
        tp = new javax.swing.JTabbedPane();
        tabProfile = new javax.swing.JPanel();
        profileContainer = new javax.swing.JPanel();
        pFormChangeProfile = new javax.swing.JPanel();
        pFormChangeProfile1 = new javax.swing.JPanel();
        lblFullName = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        lblPhoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        lblDateOfBirth = new javax.swing.JLabel();
        dcDateOfBirth = new com.toedter.calendar.JDateChooser();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblProfileErrorMessage = new javax.swing.JLabel();
        pFormProfileBtn = new javax.swing.JPanel();
        btnUpdateProfile = new javax.swing.JButton();
        btnResetProfile = new javax.swing.JButton();
        tabPassword = new javax.swing.JPanel();
        passwordContainer = new javax.swing.JPanel();
        lblChangePwd = new javax.swing.JLabel();
        pFormChangePwd = new javax.swing.JPanel();
        pFormChangePwd1 = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblCurrentPassword = new javax.swing.JLabel();
        pfCurrentPassword = new javax.swing.JPasswordField();
        lblNewPassword = new javax.swing.JLabel();
        pfNewPassword = new javax.swing.JPasswordField();
        lblConfirmNewPassword = new javax.swing.JLabel();
        pfConfirmNewPassword = new javax.swing.JPasswordField();
        lblChangePasswordErrorMessage = new javax.swing.JLabel();
        pFormChangePwdBtn = new javax.swing.JPanel();
        btnChangePassword = new javax.swing.JButton();

        profileContainer.setLayout(new java.awt.BorderLayout(0, 5));

        pFormChangeProfile.setLayout(new java.awt.BorderLayout(0, 3));

        pFormChangeProfile1.setLayout(new java.awt.GridLayout(4, 2, 0, 5));

        lblFullName.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblFullName.setText("Họ và tên");
        pFormChangeProfile1.add(lblFullName);

        txtFullName.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        pFormChangeProfile1.add(txtFullName);

        lblPhoneNumber.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblPhoneNumber.setText("Số điện thoại");
        pFormChangeProfile1.add(lblPhoneNumber);

        txtPhoneNumber.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        pFormChangeProfile1.add(txtPhoneNumber);

        lblDateOfBirth.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblDateOfBirth.setText("Ngày sinh");
        pFormChangeProfile1.add(lblDateOfBirth);

        dcDateOfBirth.setDateFormatString("dd/MM/yyyy");
        dcDateOfBirth.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        pFormChangeProfile1.add(dcDateOfBirth);

        lblEmail.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblEmail.setText("Email");
        pFormChangeProfile1.add(lblEmail);

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        pFormChangeProfile1.add(txtEmail);

        pFormChangeProfile.add(pFormChangeProfile1, java.awt.BorderLayout.NORTH);

        lblProfileErrorMessage.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblProfileErrorMessage.setForeground(new java.awt.Color(255, 51, 51));
        lblProfileErrorMessage.setText("Error message here");
        pFormChangeProfile.add(lblProfileErrorMessage, java.awt.BorderLayout.SOUTH);
        lblProfileErrorMessage.setVisible(false);

        profileContainer.add(pFormChangeProfile, java.awt.BorderLayout.CENTER);

        pFormProfileBtn.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 3));

        btnUpdateProfile.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnUpdateProfile.setText("Thay đổi");
        btnUpdateProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateProfileActionPerformed(evt);
            }
        });
        pFormProfileBtn.add(btnUpdateProfile);

        btnResetProfile.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnResetProfile.setText("Reset");
        btnResetProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetProfileActionPerformed(evt);
            }
        });
        pFormProfileBtn.add(btnResetProfile);

        profileContainer.add(pFormProfileBtn, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout tabProfileLayout = new javax.swing.GroupLayout(tabProfile);
        tabProfile.setLayout(tabProfileLayout);
        tabProfileLayout.setHorizontalGroup(
            tabProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabProfileLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(profileContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(649, Short.MAX_VALUE))
        );
        tabProfileLayout.setVerticalGroup(
            tabProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabProfileLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(profileContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(463, Short.MAX_VALUE))
        );

        tp.addTab("Thông tin cá nhân", tabProfile);

        passwordContainer.setLayout(new java.awt.BorderLayout(0, 5));

        lblChangePwd.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblChangePwd.setText("Đổi mật khẩu");
        passwordContainer.add(lblChangePwd, java.awt.BorderLayout.NORTH);

        pFormChangePwd.setLayout(new java.awt.BorderLayout(0, 3));

        pFormChangePwd1.setLayout(new java.awt.GridLayout(4, 2, 0, 5));

        lblUsername.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblUsername.setText("Tài khoản");
        pFormChangePwd1.add(lblUsername);

        txtUsername.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtUsername.setEnabled(false);
        pFormChangePwd1.add(txtUsername);

        lblCurrentPassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblCurrentPassword.setText("Mật khẩu hiện tại");
        pFormChangePwd1.add(lblCurrentPassword);

        pfCurrentPassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        pFormChangePwd1.add(pfCurrentPassword);

        lblNewPassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblNewPassword.setText("Mật khẩu mới");
        pFormChangePwd1.add(lblNewPassword);

        pfNewPassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        pFormChangePwd1.add(pfNewPassword);

        lblConfirmNewPassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblConfirmNewPassword.setText("Xác nhận mật khẩu mới");
        pFormChangePwd1.add(lblConfirmNewPassword);

        pfConfirmNewPassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        pFormChangePwd1.add(pfConfirmNewPassword);

        pFormChangePwd.add(pFormChangePwd1, java.awt.BorderLayout.NORTH);

        lblChangePasswordErrorMessage.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblChangePasswordErrorMessage.setForeground(new java.awt.Color(255, 51, 51));
        lblChangePasswordErrorMessage.setText("Error message here");
        pFormChangePwd.add(lblChangePasswordErrorMessage, java.awt.BorderLayout.SOUTH);
        lblChangePasswordErrorMessage.setVisible(false);

        passwordContainer.add(pFormChangePwd, java.awt.BorderLayout.CENTER);

        pFormChangePwdBtn.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 3));

        btnChangePassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnChangePassword.setText("Thay đổi");
        btnChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePasswordActionPerformed(evt);
            }
        });
        pFormChangePwdBtn.add(btnChangePassword);

        passwordContainer.add(pFormChangePwdBtn, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout tabPasswordLayout = new javax.swing.GroupLayout(tabPassword);
        tabPassword.setLayout(tabPasswordLayout);
        tabPasswordLayout.setHorizontalGroup(
            tabPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPasswordLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(passwordContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(649, Short.MAX_VALUE))
        );
        tabPasswordLayout.setVerticalGroup(
            tabPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPasswordLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(passwordContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(436, Short.MAX_VALUE))
        );

        tp.addTab("Mật khẩu", tabPassword);

        javax.swing.GroupLayout roundPanelLayout = new javax.swing.GroupLayout(roundPanel);
        roundPanel.setLayout(roundPanelLayout);
        roundPanelLayout.setHorizontalGroup(
            roundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tp)
                .addContainerGap())
        );
        roundPanelLayout.setVerticalGroup(
            roundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tp)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateProfileActionPerformed
        // TODO add your handling code here:
    	lblProfileErrorMessage.setVisible(false);
    	
    	if (!infoChanged(user)) {
    		return;
    	}
    	
    	if (checkEmpty()) {
    		lblProfileErrorMessage.setText("Thông tin không được bỏ trống");
    		lblProfileErrorMessage.setVisible(true);
    		return;
    	}
    	
    	try {
    		if (!validateRegex()) {
        		return;
        	}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    	// Store new info
    	NhanVien temp = new NhanVien();
    	temp.setMaNV(user.getMaNV());
    	temp.setTenNV(txtFullName.getText().trim());
       	temp.setSDT(txtPhoneNumber.getText().trim());
       	temp.setEmail(txtEmail.getText().trim());
       	temp.setNgaySinh(dcDateOfBirth.getDate());
       	
       	// Update info
       	int result = 0;
       	try {
			result = new NhanVienBUS().updateEmployeeInfo(temp);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			JOptionPane.showMessageDialog(this, "Lỗi kết nối cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
			return;
	    } catch (Exception e) {
	        JOptionPane.showMessageDialog(this, "Lỗi không xác định", "Error", JOptionPane.ERROR_MESSAGE);
	        e.printStackTrace();
	        return;
	    }
       	
       	if (result > 0) {
       		// Assign new info
       		user.setMaNV(temp.getMaNV());
       		user.setTenNV(temp.getTenNV());
       		user.setSDT(temp.getSDT());
       		user.setEmail(temp.getEmail());
       		user.setNgaySinh(temp.getNgaySinh());
       		
       		JOptionPane.showMessageDialog(this, "Cập nhật thông tin thành công. Vui lòng đăng nhập lại để thông tin hiển thị được chính xác.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
       	} else {
       		JOptionPane.showMessageDialog(this, "Có lỗi xảy ra trong quá trình cập nhật", "Error", JOptionPane.ERROR_MESSAGE);
       	}
    }//GEN-LAST:event_btnUpdateProfileActionPerformed

    private void btnResetProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetProfileActionPerformed
        // TODO add your handling code here:
    	lblProfileErrorMessage.setVisible(false);
    	lblProfileErrorMessage.setText("");
    	loadUserInfo(user);
    }//GEN-LAST:event_btnResetProfileActionPerformed

    private void btnChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePasswordActionPerformed
        // TODO add your handling code here:
    	lblChangePasswordErrorMessage.setVisible(false);
    	
    	if (allPasswordFieldEmpty()) {
    		return;
    	}
    	
    	if (anyPasswordFieldEmpty()) {
    		lblChangePasswordErrorMessage.setText("Bạn chưa nhập đầy đủ thông tin");
    		pfCurrentPassword.requestFocus();
    		lblChangePasswordErrorMessage.setVisible(true);
    		return;
    	}
    	
    	// Check if matches current password
    	String currentPassword = PasswordHash.hashPassword(new String(pfCurrentPassword.getPassword()));
    	if (!currentPassword.equals(user.getMatKhau())) {
    		lblChangePasswordErrorMessage.setText("Mật khẩu hiện tại không đúng");
    		pfCurrentPassword.requestFocus();
    		lblChangePasswordErrorMessage.setVisible(true);
    		return;
    	}
    	
    	// Check if new password = confirm new password
    	String newPassword = PasswordHash.hashPassword(new String(pfNewPassword.getPassword()));
    	String confirmNewPassword = PasswordHash.hashPassword(new String(pfConfirmNewPassword.getPassword()));
    	if (!newPassword.equals(confirmNewPassword)) {
    		lblChangePasswordErrorMessage.setText("Mật khẩu mới chưa trùng khớp");
    		pfConfirmNewPassword.requestFocus();
    		lblChangePasswordErrorMessage.setVisible(true);
    		return;
    	}
    	
    	// Store new password
    	NhanVien temp = new NhanVien();
    	temp.setMaNV(user.getMaNV());
    	temp.setMatKhau(newPassword);
       	
    	// Change password
       	int result = 0;
       	try {
			result = new NhanVienBUS().changePassword(temp);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			JOptionPane.showMessageDialog(this, "Lỗi kết nối cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
			return;
	    } catch (Exception e) {
	        JOptionPane.showMessageDialog(this, "Lỗi không xác định", "Error", JOptionPane.ERROR_MESSAGE);
	        e.printStackTrace();
	        return;
	    }
       	
       	if (result > 0) {
       		// Assign new password
       		user.setMatKhau(newPassword);
       		
       		// Clear input fields
       		pfCurrentPassword.setText("");
       		pfNewPassword.setText("");
       		pfConfirmNewPassword.setText("");
       		
       		JOptionPane.showMessageDialog(this, "Thay đổi mật khẩu thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
       	} else {
       		JOptionPane.showMessageDialog(this, "Có lỗi xảy ra, vui lòng thử lại", "Error", JOptionPane.ERROR_MESSAGE);
       	}
    	
    }//GEN-LAST:event_btnChangePasswordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangePassword;
    private javax.swing.JButton btnResetProfile;
    private javax.swing.JButton btnUpdateProfile;
    private com.toedter.calendar.JDateChooser dcDateOfBirth;
    private javax.swing.JLabel lblChangePasswordErrorMessage;
    private javax.swing.JLabel lblChangePwd;
    private javax.swing.JLabel lblConfirmNewPassword;
    private javax.swing.JLabel lblCurrentPassword;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblNewPassword;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblProfileErrorMessage;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPanel pFormChangeProfile;
    private javax.swing.JPanel pFormChangeProfile1;
    private javax.swing.JPanel pFormChangePwd;
    private javax.swing.JPanel pFormChangePwd1;
    private javax.swing.JPanel pFormChangePwdBtn;
    private javax.swing.JPanel pFormProfileBtn;
    private javax.swing.JPanel passwordContainer;
    private javax.swing.JPasswordField pfConfirmNewPassword;
    private javax.swing.JPasswordField pfCurrentPassword;
    private javax.swing.JPasswordField pfNewPassword;
    private javax.swing.JPanel profileContainer;
    private CUSTOM.DraggableRoundPanel roundPanel;
    private javax.swing.JPanel tabPassword;
    private javax.swing.JPanel tabProfile;
    private javax.swing.JTabbedPane tp;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    
    private NhanVien user;
    private ChucVu permission;
    
    private void loadUserInfo(NhanVien user) {
    	txtFullName.setText(user.getTenNV());
    	txtEmail.setText(user.getEmail());
    	txtPhoneNumber.setText(user.getSDT());
    	txtUsername.setText(user.getTaiKhoan());
    	dcDateOfBirth.setDate(user.getNgaySinh());
    }
    
    private boolean infoChanged(NhanVien user) { 	
    	boolean dateChanged = false;
    	try {
    		dateChanged = !dcDateOfBirth.getDate().equals(user.getNgaySinh());
    	} catch (NullPointerException e) {
    		dateChanged = true;
    	}
    	
    	return !txtFullName.getText().trim().equals(user.getTenNV()) || !txtEmail.getText().trim().equals(user.getEmail()) || !txtPhoneNumber.getText().trim().equals(user.getSDT()) || dateChanged;
    }
    
    private boolean checkEmpty() {
    	boolean dateEmpty = true;
    	try {
    		dateEmpty = dcDateOfBirth.getDate() == null;
    	} catch (NullPointerException e) {
    		dateEmpty = true;
    	}
    	return txtFullName.getText().trim().isEmpty() || txtEmail.getText().trim().isEmpty() || txtPhoneNumber.getText().trim().isEmpty() || dateEmpty;
    }
    
    private boolean validateRegex() throws ParseException {
    	KiemTra validate = new KiemTra();
    	boolean valid = true;
    	if (!validate.KTHoVaTen(txtFullName.getText().trim())) {
    		valid = false;
    		lblProfileErrorMessage.setText("Họ và tên không hợp lệ");
    		txtFullName.requestFocus();
    	} else if (!validate.isValidPhone(txtPhoneNumber.getText().trim())) {
    		valid = false;
    		lblProfileErrorMessage.setText("Số điện thoại không hợp lệ");
    		txtPhoneNumber.requestFocus();
    	} else if (!validate.isValidEmail(txtEmail.getText().trim())) {
    		valid = false;
    		lblProfileErrorMessage.setText("Email không hợp lệ");
    		txtEmail.requestFocus();
    	}
    	
    	// Validate date
    	SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    	Date today = format.parse(format.format(new Date())); // only get date, time is set to 00:00:00
    	if (dcDateOfBirth.getDate().compareTo(today) >= 0) {
    		valid = false;
    		lblProfileErrorMessage.setText("Ngày sinh không hợp lệ");
    		dcDateOfBirth.requestFocus();
    	}

    	if (!valid) {
    		lblProfileErrorMessage.setVisible(true);
    	}
    	return valid;
    }
    
    private boolean allPasswordFieldEmpty() {
    	return (new String(pfCurrentPassword.getPassword())).isEmpty() && (new String(pfNewPassword.getPassword())).isEmpty() && (new String(pfConfirmNewPassword.getPassword())).isEmpty();
    }
    
    private boolean anyPasswordFieldEmpty() {
    	return (new String(pfCurrentPassword.getPassword())).isEmpty() || (new String(pfNewPassword.getPassword())).isEmpty() || (new String(pfConfirmNewPassword.getPassword())).isEmpty();
    }
}
